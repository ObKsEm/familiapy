// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_config_2eproto__INCLUDED
#define PROTOBUF_config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace familia {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_config_2eproto();
void protobuf_AssignDesc_config_2eproto();
void protobuf_ShutdownFile_config_2eproto();

class ModelConfig;

enum ModelType {
  LDA = 0,
  SLDA = 1
};
bool ModelType_IsValid(int value);
const ModelType ModelType_MIN = LDA;
const ModelType ModelType_MAX = SLDA;
const int ModelType_ARRAYSIZE = ModelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModelType_descriptor();
inline const ::std::string& ModelType_Name(ModelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModelType_descriptor(), value);
}
inline bool ModelType_Parse(
    const ::std::string& name, ModelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModelType>(
    ModelType_descriptor(), name, value);
}
// ===================================================================

class ModelConfig : public ::google::protobuf::Message {
 public:
  ModelConfig();
  virtual ~ModelConfig();

  ModelConfig(const ModelConfig& from);

  inline ModelConfig& operator=(const ModelConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelConfig& default_instance();

  void Swap(ModelConfig* other);

  // implements Message ----------------------------------------------

  ModelConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelConfig& from);
  void MergeFrom(const ModelConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .familia.ModelType type = 1 [default = LDA];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::familia::ModelType type() const;
  inline void set_type(::familia::ModelType value);

  // optional int32 num_topics = 2 [default = 100];
  inline bool has_num_topics() const;
  inline void clear_num_topics();
  static const int kNumTopicsFieldNumber = 2;
  inline ::google::protobuf::int32 num_topics() const;
  inline void set_num_topics(::google::protobuf::int32 value);

  // optional float alpha = 3 [default = 0.1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 3;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 4 [default = 0.01];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 4;
  inline float beta() const;
  inline void set_beta(float value);

  // optional string word_topic_file = 6 [default = "word_topic.model"];
  inline bool has_word_topic_file() const;
  inline void clear_word_topic_file();
  static const int kWordTopicFileFieldNumber = 6;
  inline const ::std::string& word_topic_file() const;
  inline void set_word_topic_file(const ::std::string& value);
  inline void set_word_topic_file(const char* value);
  inline void set_word_topic_file(const char* value, size_t size);
  inline ::std::string* mutable_word_topic_file();
  inline ::std::string* release_word_topic_file();
  inline void set_allocated_word_topic_file(::std::string* word_topic_file);

  // optional string vocab_file = 7 [default = "vocab_info.txt"];
  inline bool has_vocab_file() const;
  inline void clear_vocab_file();
  static const int kVocabFileFieldNumber = 7;
  inline const ::std::string& vocab_file() const;
  inline void set_vocab_file(const ::std::string& value);
  inline void set_vocab_file(const char* value);
  inline void set_vocab_file(const char* value, size_t size);
  inline ::std::string* mutable_vocab_file();
  inline ::std::string* release_vocab_file();
  inline void set_allocated_vocab_file(::std::string* vocab_file);

  // optional string twe_model_file = 8 [default = ""];
  inline bool has_twe_model_file() const;
  inline void clear_twe_model_file();
  static const int kTweModelFileFieldNumber = 8;
  inline const ::std::string& twe_model_file() const;
  inline void set_twe_model_file(const ::std::string& value);
  inline void set_twe_model_file(const char* value);
  inline void set_twe_model_file(const char* value, size_t size);
  inline ::std::string* mutable_twe_model_file();
  inline ::std::string* release_twe_model_file();
  inline void set_allocated_twe_model_file(::std::string* twe_model_file);

  // @@protoc_insertion_point(class_scope:familia.ModelConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num_topics();
  inline void clear_has_num_topics();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_word_topic_file();
  inline void clear_has_word_topic_file();
  inline void set_has_vocab_file();
  inline void clear_has_vocab_file();
  inline void set_has_twe_model_file();
  inline void clear_has_twe_model_file();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 num_topics_;
  float alpha_;
  float beta_;
  ::std::string* word_topic_file_;
  static ::std::string* _default_word_topic_file_;
  ::std::string* vocab_file_;
  static ::std::string* _default_vocab_file_;
  ::std::string* twe_model_file_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static ModelConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ModelConfig

// optional .familia.ModelType type = 1 [default = LDA];
inline bool ModelConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::familia::ModelType ModelConfig::type() const {
  return static_cast< ::familia::ModelType >(type_);
}
inline void ModelConfig::set_type(::familia::ModelType value) {
  assert(::familia::ModelType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 num_topics = 2 [default = 100];
inline bool ModelConfig::has_num_topics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelConfig::set_has_num_topics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelConfig::clear_has_num_topics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelConfig::clear_num_topics() {
  num_topics_ = 100;
  clear_has_num_topics();
}
inline ::google::protobuf::int32 ModelConfig::num_topics() const {
  return num_topics_;
}
inline void ModelConfig::set_num_topics(::google::protobuf::int32 value) {
  set_has_num_topics();
  num_topics_ = value;
}

// optional float alpha = 3 [default = 0.1];
inline bool ModelConfig::has_alpha() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelConfig::set_has_alpha() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelConfig::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelConfig::clear_alpha() {
  alpha_ = 0.1f;
  clear_has_alpha();
}
inline float ModelConfig::alpha() const {
  return alpha_;
}
inline void ModelConfig::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
}

// optional float beta = 4 [default = 0.01];
inline bool ModelConfig::has_beta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelConfig::set_has_beta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelConfig::clear_has_beta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelConfig::clear_beta() {
  beta_ = 0.01f;
  clear_has_beta();
}
inline float ModelConfig::beta() const {
  return beta_;
}
inline void ModelConfig::set_beta(float value) {
  set_has_beta();
  beta_ = value;
}

// optional string word_topic_file = 6 [default = "word_topic.model"];
inline bool ModelConfig::has_word_topic_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModelConfig::set_has_word_topic_file() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModelConfig::clear_has_word_topic_file() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModelConfig::clear_word_topic_file() {
  if (word_topic_file_ != _default_word_topic_file_) {
    word_topic_file_->assign(*_default_word_topic_file_);
  }
  clear_has_word_topic_file();
}
inline const ::std::string& ModelConfig::word_topic_file() const {
  return *word_topic_file_;
}
inline void ModelConfig::set_word_topic_file(const ::std::string& value) {
  set_has_word_topic_file();
  if (word_topic_file_ == _default_word_topic_file_) {
    word_topic_file_ = new ::std::string;
  }
  word_topic_file_->assign(value);
}
inline void ModelConfig::set_word_topic_file(const char* value) {
  set_has_word_topic_file();
  if (word_topic_file_ == _default_word_topic_file_) {
    word_topic_file_ = new ::std::string;
  }
  word_topic_file_->assign(value);
}
inline void ModelConfig::set_word_topic_file(const char* value, size_t size) {
  set_has_word_topic_file();
  if (word_topic_file_ == _default_word_topic_file_) {
    word_topic_file_ = new ::std::string;
  }
  word_topic_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelConfig::mutable_word_topic_file() {
  set_has_word_topic_file();
  if (word_topic_file_ == _default_word_topic_file_) {
    word_topic_file_ = new ::std::string(*_default_word_topic_file_);
  }
  return word_topic_file_;
}
inline ::std::string* ModelConfig::release_word_topic_file() {
  clear_has_word_topic_file();
  if (word_topic_file_ == _default_word_topic_file_) {
    return NULL;
  } else {
    ::std::string* temp = word_topic_file_;
    word_topic_file_ = const_cast< ::std::string*>(_default_word_topic_file_);
    return temp;
  }
}
inline void ModelConfig::set_allocated_word_topic_file(::std::string* word_topic_file) {
  if (word_topic_file_ != _default_word_topic_file_) {
    delete word_topic_file_;
  }
  if (word_topic_file) {
    set_has_word_topic_file();
    word_topic_file_ = word_topic_file;
  } else {
    clear_has_word_topic_file();
    word_topic_file_ = const_cast< ::std::string*>(_default_word_topic_file_);
  }
}

// optional string vocab_file = 7 [default = "vocab_info.txt"];
inline bool ModelConfig::has_vocab_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModelConfig::set_has_vocab_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModelConfig::clear_has_vocab_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModelConfig::clear_vocab_file() {
  if (vocab_file_ != _default_vocab_file_) {
    vocab_file_->assign(*_default_vocab_file_);
  }
  clear_has_vocab_file();
}
inline const ::std::string& ModelConfig::vocab_file() const {
  return *vocab_file_;
}
inline void ModelConfig::set_vocab_file(const ::std::string& value) {
  set_has_vocab_file();
  if (vocab_file_ == _default_vocab_file_) {
    vocab_file_ = new ::std::string;
  }
  vocab_file_->assign(value);
}
inline void ModelConfig::set_vocab_file(const char* value) {
  set_has_vocab_file();
  if (vocab_file_ == _default_vocab_file_) {
    vocab_file_ = new ::std::string;
  }
  vocab_file_->assign(value);
}
inline void ModelConfig::set_vocab_file(const char* value, size_t size) {
  set_has_vocab_file();
  if (vocab_file_ == _default_vocab_file_) {
    vocab_file_ = new ::std::string;
  }
  vocab_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelConfig::mutable_vocab_file() {
  set_has_vocab_file();
  if (vocab_file_ == _default_vocab_file_) {
    vocab_file_ = new ::std::string(*_default_vocab_file_);
  }
  return vocab_file_;
}
inline ::std::string* ModelConfig::release_vocab_file() {
  clear_has_vocab_file();
  if (vocab_file_ == _default_vocab_file_) {
    return NULL;
  } else {
    ::std::string* temp = vocab_file_;
    vocab_file_ = const_cast< ::std::string*>(_default_vocab_file_);
    return temp;
  }
}
inline void ModelConfig::set_allocated_vocab_file(::std::string* vocab_file) {
  if (vocab_file_ != _default_vocab_file_) {
    delete vocab_file_;
  }
  if (vocab_file) {
    set_has_vocab_file();
    vocab_file_ = vocab_file;
  } else {
    clear_has_vocab_file();
    vocab_file_ = const_cast< ::std::string*>(_default_vocab_file_);
  }
}

// optional string twe_model_file = 8 [default = ""];
inline bool ModelConfig::has_twe_model_file() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModelConfig::set_has_twe_model_file() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModelConfig::clear_has_twe_model_file() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModelConfig::clear_twe_model_file() {
  if (twe_model_file_ != &::google::protobuf::internal::kEmptyString) {
    twe_model_file_->clear();
  }
  clear_has_twe_model_file();
}
inline const ::std::string& ModelConfig::twe_model_file() const {
  return *twe_model_file_;
}
inline void ModelConfig::set_twe_model_file(const ::std::string& value) {
  set_has_twe_model_file();
  if (twe_model_file_ == &::google::protobuf::internal::kEmptyString) {
    twe_model_file_ = new ::std::string;
  }
  twe_model_file_->assign(value);
}
inline void ModelConfig::set_twe_model_file(const char* value) {
  set_has_twe_model_file();
  if (twe_model_file_ == &::google::protobuf::internal::kEmptyString) {
    twe_model_file_ = new ::std::string;
  }
  twe_model_file_->assign(value);
}
inline void ModelConfig::set_twe_model_file(const char* value, size_t size) {
  set_has_twe_model_file();
  if (twe_model_file_ == &::google::protobuf::internal::kEmptyString) {
    twe_model_file_ = new ::std::string;
  }
  twe_model_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelConfig::mutable_twe_model_file() {
  set_has_twe_model_file();
  if (twe_model_file_ == &::google::protobuf::internal::kEmptyString) {
    twe_model_file_ = new ::std::string;
  }
  return twe_model_file_;
}
inline ::std::string* ModelConfig::release_twe_model_file() {
  clear_has_twe_model_file();
  if (twe_model_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = twe_model_file_;
    twe_model_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModelConfig::set_allocated_twe_model_file(::std::string* twe_model_file) {
  if (twe_model_file_ != &::google::protobuf::internal::kEmptyString) {
    delete twe_model_file_;
  }
  if (twe_model_file) {
    set_has_twe_model_file();
    twe_model_file_ = twe_model_file;
  } else {
    clear_has_twe_model_file();
    twe_model_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace familia

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::familia::ModelType>() {
  return ::familia::ModelType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2eproto__INCLUDED
