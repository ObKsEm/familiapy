// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "familia/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace familia {

namespace {

const ::google::protobuf::Descriptor* ModelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModelType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_config_2eproto() {
  protobuf_AddDesc_config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "config.proto");
  GOOGLE_CHECK(file != NULL);
  ModelConfig_descriptor_ = file->message_type(0);
  static const int ModelConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, num_topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, word_topic_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, vocab_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, twe_model_file_),
  };
  ModelConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelConfig_descriptor_,
      ModelConfig::default_instance_,
      ModelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelConfig));
  ModelType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelConfig_descriptor_, &ModelConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_config_2eproto() {
  delete ModelConfig::default_instance_;
  delete ModelConfig_reflection_;
  delete ModelConfig::_default_word_topic_file_;
  delete ModelConfig::_default_vocab_file_;
}

void protobuf_AddDesc_config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014config.proto\022\007familia\"\336\001\n\013ModelConfig\022"
    "%\n\004type\030\001 \001(\0162\022.familia.ModelType:\003LDA\022\027"
    "\n\nnum_topics\030\002 \001(\005:\003100\022\022\n\005alpha\030\003 \001(\002:\003"
    "0.1\022\022\n\004beta\030\004 \001(\002:\0040.01\022)\n\017word_topic_fi"
    "le\030\006 \001(\t:\020word_topic.model\022\"\n\nvocab_file"
    "\030\007 \001(\t:\016vocab_info.txt\022\030\n\016twe_model_file"
    "\030\010 \001(\t:\000*\036\n\tModelType\022\007\n\003LDA\020\000\022\010\n\004SLDA\020\001", 280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
  ModelConfig::_default_word_topic_file_ =
      new ::std::string("word_topic.model", 16);
  ModelConfig::_default_vocab_file_ =
      new ::std::string("vocab_info.txt", 14);
  ModelConfig::default_instance_ = new ModelConfig();
  ModelConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_config_2eproto {
  StaticDescriptorInitializer_config_2eproto() {
    protobuf_AddDesc_config_2eproto();
  }
} static_descriptor_initializer_config_2eproto_;
const ::google::protobuf::EnumDescriptor* ModelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelType_descriptor_;
}
bool ModelType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

::std::string* ModelConfig::_default_word_topic_file_ = NULL;
::std::string* ModelConfig::_default_vocab_file_ = NULL;
#ifndef _MSC_VER
const int ModelConfig::kTypeFieldNumber;
const int ModelConfig::kNumTopicsFieldNumber;
const int ModelConfig::kAlphaFieldNumber;
const int ModelConfig::kBetaFieldNumber;
const int ModelConfig::kWordTopicFileFieldNumber;
const int ModelConfig::kVocabFileFieldNumber;
const int ModelConfig::kTweModelFileFieldNumber;
#endif  // !_MSC_VER

ModelConfig::ModelConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelConfig::InitAsDefaultInstance() {
}

ModelConfig::ModelConfig(const ModelConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  num_topics_ = 100;
  alpha_ = 0.1f;
  beta_ = 0.01f;
  word_topic_file_ = const_cast< ::std::string*>(_default_word_topic_file_);
  vocab_file_ = const_cast< ::std::string*>(_default_vocab_file_);
  twe_model_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelConfig::~ModelConfig() {
  SharedDtor();
}

void ModelConfig::SharedDtor() {
  if (word_topic_file_ != _default_word_topic_file_) {
    delete word_topic_file_;
  }
  if (vocab_file_ != _default_vocab_file_) {
    delete vocab_file_;
  }
  if (twe_model_file_ != &::google::protobuf::internal::kEmptyString) {
    delete twe_model_file_;
  }
  if (this != default_instance_) {
  }
}

void ModelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelConfig_descriptor_;
}

const ModelConfig& ModelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

ModelConfig* ModelConfig::default_instance_ = NULL;

ModelConfig* ModelConfig::New() const {
  return new ModelConfig;
}

void ModelConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    num_topics_ = 100;
    alpha_ = 0.1f;
    beta_ = 0.01f;
    if (has_word_topic_file()) {
      if (word_topic_file_ != _default_word_topic_file_) {
        word_topic_file_->assign(*_default_word_topic_file_);
      }
    }
    if (has_vocab_file()) {
      if (vocab_file_ != _default_vocab_file_) {
        vocab_file_->assign(*_default_vocab_file_);
      }
    }
    if (has_twe_model_file()) {
      if (twe_model_file_ != &::google::protobuf::internal::kEmptyString) {
        twe_model_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .familia.ModelType type = 1 [default = LDA];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::familia::ModelType_IsValid(value)) {
            set_type(static_cast< ::familia::ModelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_topics;
        break;
      }

      // optional int32 num_topics = 2 [default = 100];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_topics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_topics_)));
          set_has_num_topics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_alpha;
        break;
      }

      // optional float alpha = 3 [default = 0.1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_beta;
        break;
      }

      // optional float beta = 4 [default = 0.01];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_word_topic_file;
        break;
      }

      // optional string word_topic_file = 6 [default = "word_topic.model"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word_topic_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word_topic_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->word_topic_file().data(), this->word_topic_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_vocab_file;
        break;
      }

      // optional string vocab_file = 7 [default = "vocab_info.txt"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vocab_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vocab_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vocab_file().data(), this->vocab_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_twe_model_file;
        break;
      }

      // optional string twe_model_file = 8 [default = ""];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_twe_model_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_twe_model_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->twe_model_file().data(), this->twe_model_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .familia.ModelType type = 1 [default = LDA];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 num_topics = 2 [default = 100];
  if (has_num_topics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_topics(), output);
  }

  // optional float alpha = 3 [default = 0.1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->alpha(), output);
  }

  // optional float beta = 4 [default = 0.01];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->beta(), output);
  }

  // optional string word_topic_file = 6 [default = "word_topic.model"];
  if (has_word_topic_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word_topic_file().data(), this->word_topic_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->word_topic_file(), output);
  }

  // optional string vocab_file = 7 [default = "vocab_info.txt"];
  if (has_vocab_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vocab_file().data(), this->vocab_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->vocab_file(), output);
  }

  // optional string twe_model_file = 8 [default = ""];
  if (has_twe_model_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->twe_model_file().data(), this->twe_model_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->twe_model_file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .familia.ModelType type = 1 [default = LDA];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 num_topics = 2 [default = 100];
  if (has_num_topics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_topics(), target);
  }

  // optional float alpha = 3 [default = 0.1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->alpha(), target);
  }

  // optional float beta = 4 [default = 0.01];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->beta(), target);
  }

  // optional string word_topic_file = 6 [default = "word_topic.model"];
  if (has_word_topic_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word_topic_file().data(), this->word_topic_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->word_topic_file(), target);
  }

  // optional string vocab_file = 7 [default = "vocab_info.txt"];
  if (has_vocab_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vocab_file().data(), this->vocab_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->vocab_file(), target);
  }

  // optional string twe_model_file = 8 [default = ""];
  if (has_twe_model_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->twe_model_file().data(), this->twe_model_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->twe_model_file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .familia.ModelType type = 1 [default = LDA];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 num_topics = 2 [default = 100];
    if (has_num_topics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_topics());
    }

    // optional float alpha = 3 [default = 0.1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 4 [default = 0.01];
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional string word_topic_file = 6 [default = "word_topic.model"];
    if (has_word_topic_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word_topic_file());
    }

    // optional string vocab_file = 7 [default = "vocab_info.txt"];
    if (has_vocab_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vocab_file());
    }

    // optional string twe_model_file = 8 [default = ""];
    if (has_twe_model_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->twe_model_file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelConfig::MergeFrom(const ModelConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num_topics()) {
      set_num_topics(from.num_topics());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_word_topic_file()) {
      set_word_topic_file(from.word_topic_file());
    }
    if (from.has_vocab_file()) {
      set_vocab_file(from.vocab_file());
    }
    if (from.has_twe_model_file()) {
      set_twe_model_file(from.twe_model_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfig::CopyFrom(const ModelConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfig::IsInitialized() const {

  return true;
}

void ModelConfig::Swap(ModelConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(num_topics_, other->num_topics_);
    std::swap(alpha_, other->alpha_);
    std::swap(beta_, other->beta_);
    std::swap(word_topic_file_, other->word_topic_file_);
    std::swap(vocab_file_, other->vocab_file_);
    std::swap(twe_model_file_, other->twe_model_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelConfig_descriptor_;
  metadata.reflection = ModelConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace familia

// @@protoc_insertion_point(global_scope)
